buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'org.ajoberstar:grgit:2.1.0'
        classpath 'org.ajoberstar.reckon:reckon-gradle:0.3.0'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

apply plugin: 'java-library'
apply plugin: "org.ajoberstar.grgit"
apply plugin: "org.ajoberstar.reckon"
apply plugin: 'com.bmuschko.nexus'

group = "cl.daplay"
description = "Rut implementation in Java"

reckon {
    normal = scopeFromProp()
    preRelease = snapshotFromProp()
}

repositories {
    mavenCentral()
    jcenter()
}

targetCompatibility = 1.5
sourceCompatibility = 1.5

dependencies {
    testImplementation 'junit:junit:4.12'
}

ext {
    versionPattern = /\d+\.\d+\.\d+/
}

def requireReleaseVersion(alert = "") {
    // execute if not snapshot and matches \d.\d.\d
    def execute = !version.toString().contains("SNAPSHOT") && (version.toString() ==~ versionPattern)
    if (!execute && alert) {
        println alert
    }
    return execute;
}

task readmeUpdate {
    description = 'Updateso version in README.md'

    onlyIf {
        def alert = "README.md won't be updated, as $version is an SNAPSHOT version"
        return requireReleaseVersion(alert)
    }

    // handle to README.md
    def readme = new File(project.projectDir, "README.md")

    // replace text in README.md
    doLast {
        def text = readme.text
        readme.text = text.replaceAll versionPattern, version.toString()
    }

    // add, commit and push change
    doLast {
        grgit.add(patterns: ['README.md'])
        grgit.commit(message: "chore(README.md) releases version: '${version.toString()}'.")
        grgit.push()
    }
}

task release() {
    onlyIf {
        def alert = "task Release, won't be executed, as $version is an SNAPSHOT version"
        return requireReleaseVersion(alert)
    }

    final String releaseName = "v${version}"

    doLast {
        println "releasing: $releaseName"
        grgit.tag.add(name: releaseName, message: releaseName, annotate: true)
        grgit.push(refsOrSpecs: ["refs/tags/${releaseName}"])
    }
}

release.dependsOn build
release.dependsOn readmeUpdate
release.finalizedBy uploadArchives

readmeUpdate.mustRunAfter(build)

// unused tasks by plugin Reckon
project.tasks.remove(reckonTagCreate)
project.tasks.remove(reckonTagPush)

modifyPom {
    project {

        name project.name
        description project.description
        url 'https://github.com/daplay/jrut'

        scm {
            url 'https://github.com/daplay/jrut'
            connection 'scm:https://github.com/daplay/jrut.git'
            developerConnection 'scm:git://github.com/daplay/jrut.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }

        developers {
            developer {
                id 'daplay'
                name 'Daniel Meneses'
                email 'daplay@gmail.com'
            }
        }
    }
}

